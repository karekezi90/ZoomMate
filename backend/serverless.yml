org: remoteitall
app: zoommate
service: ZoomMate

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  apiGateway:
    shouldStartNameWithService: true
  logs: 
    restApi: true
  tracing:
    lambda: true
    apiGateway: true
  logRetentionInDays: 14

  # ðŸ‘‰ Provider-level env
  environment:
    STAGE: ${opt:stage, 'dev'}
    APP_REGION: ${self:provider.region}
    USERS_TABLE: !Ref UsersTable
    GROUPS_TABLE: !Ref GroupsTable
    GROUP_MEMBERS_TABLE: !Ref GroupMembersTable
    EVENTS_TABLE: !Ref EventsTable
    EVENT_ATTENDEES_TABLE: !Ref EventAttendeesTable

    API_BASE: ${cf:${self:service}-${sls:stage}.ServiceEndpoint, 'http://localhost:3000'}
    # API_BASE: !Sub 'https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com'

  # ðŸ‘‰ Provider-level IAM:
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:SignUp
            - cognito-idp:ConfirmSignUp
            - cognito-idp:ResendConfirmationCode
            - cognito-idp:InitiateAuth
            - cognito-idp:GetUser
            - cognito-idp:DeleteUser
          Resource: "*"

        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - !GetAtt UsersTable.Arn
            - !Sub '${UsersTable.Arn}/index/*'
            - !GetAtt GroupsTable.Arn
            - !Sub '${GroupsTable.Arn}/index/*'
            - !GetAtt GroupMembersTable.Arn
            - !Sub '${GroupMembersTable.Arn}/index/*'
            - !GetAtt EventsTable.Arn
            - !Sub '${EventsTable.Arn}/index/*'
            - !GetAtt EventAttendeesTable.Arn
            - !Sub '${EventAttendeesTable.Arn}/index/*'

custom:
  corsConfig: &corsDefaults
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
    allowCredentials: false
    maxAge: 86400

functions:
  # ---------- Auth endpoints ----------
  signup:
    handler: src/auth/signup.handler
    environment:
      USER_POOL_CLIENT_ID: !Ref UserPoolClientSpa
    events:
      - http: 
          method: POST
          path: /auth/signup
          cors: *corsDefaults 
  confirmSignup:
    handler: src/auth/confirmSignup.handler
    environment:
      USER_POOL_CLIENT_ID: !Ref UserPoolClientSpa
    events:
      - http: 
          method: POST
          path: /auth/confirm
          cors: *corsDefaults
  resendCode:
    handler: src/auth/resendCode.handler
    environment:
      USER_POOL_CLIENT_ID: !Ref UserPoolClientSpa
    events:
      - http: 
          method: POST
          path: /auth/resend
          cors: *corsDefaults
  signin:
    handler: src/auth/signin.handler
    environment:
      USER_POOL_CLIENT_ID: !Ref UserPoolClientSpa
    events:
      - http: 
          method: POST
          path: /auth/signin
          cors: *corsDefaults
  signout:
    handler: src/auth/signout.handler
    events: 
      - http: 
          method: POST
          path: /auth/signout
          cors: *corsDefaults
  delete:
    handler: src/auth/deleteSelf.handler
    events:
      - http:
          method: POST
          path: /auth/delete-self
          cors: *corsDefaults

  # ---------- User endpoints ----------
  searchUsers: 
    handler: src/users/searchUsers.handler
    events:
      - http:
          path: /users/search
          method: POST
          cors: *corsDefaults
  getUser: 
    handler: src/users/getUser.handler
    events:
      - http:
          path: /users/me
          method: GET
          cors: *corsDefaults
  getUsers: 
    handler: src/users/getUsers.handler
    events:
      - http:
          path: /users
          method: GET
          cors: *corsDefaults
  updateUser: 
    handler: src/users/updateUser.handler
    events:
      - http:
          path: /users/me
          method: PUT
          cors: *corsDefaults

  # ---------- Dev-only admin confirm ----------
  confirmAdmin:
    handler: src/auth/confirmAdmin.handler
    environment:
      USER_POOL_ID: !Ref UserPool
    iamRoleStatements:
      - Effect: Allow
        Action: cognito-idp:AdminConfirmSignUp
        Resource: !GetAtt UserPool.Arn
    events:
      - http: 
          method: POST
          path: /auth/confirm-admin
          cors: *corsDefaults

  # ---------- Group endpoints ----------
  createGroup:
    handler: src/groups/createGroup.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups
          method: POST
          cors: *corsDefaults
  getGroup:
    handler: src/groups/getGroup.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}
          method: GET
          cors: *corsDefaults
  updateGroup:
    handler: src/groups/updateGroup.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}
          method: PUT
          cors: *corsDefaults
  deleteGroup:
    handler: src/groups/deleteGroup.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}
          method: DELETE
          cors: *corsDefaults
  listGroups:
    handler: src/groups/listGroups.handler
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups
          method: GET
          cors: *corsDefaults
  
  # ---------- GroupMember endpoints ----------
  addMember:
    handler: src/groupMembers/addMember.handler
    description: Join a group (self)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}/members
          method: POST
          cors: *corsDefaults
  removeMember:
    handler: src/groupMembers/removeMember.handler
    description: Leave a group (self)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}/members/{userId}
          method: DELETE
          cors: *corsDefaults
  listMembers:
    handler: src/groupMembers/listMembers.handler
    description: List group members
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}/members
          method: GET
          cors: *corsDefaults
          
  # ---------- Event endpoints ----------
  createEvent:
    handler: src/events/createEvent.handler
    description: Create an event in a group
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}/events
          method: POST
          cors: *corsDefaults
  getEvent:
    handler: src/events/getEvent.handler
    description: Get event details
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}
          method: GET
          cors: *corsDefaults
  updateEvent:
    handler: src/events/updateEvent.handler
    description: Update an event (creator only)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}
          method: PUT
          cors: *corsDefaults
  deleteEvent:
    handler: src/events/deleteEvent.handler
    description: DELETE an event (creator only)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}
          method: DELETE
          cors: *corsDefaults
  listEventsByGroup:
    handler: src/events/listEventsByGroup.handler
    description: List events for a group
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: groups/{groupId}/events
          method: GET
          cors: *corsDefaults

  # ---------- EventAttendee endpoints ----------
  rsvpEvent:
    handler: src/eventAttendees/rsvpEvent.handler
    description: RSVP to an event (self)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}/attendees
          method: POST
          cors: *corsDefaults
  unrsvpEvent:
    handler: src/eventAttendees/unrsvpEvent.handler
    description: Cancel RSVP (self)
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}/attendees/me
          method: DELETE
          cors: *corsDefaults
  listAttendees:
    handler: src/eventAttendees/listAttendees.handler
    description: List attendees for an event
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: events/{eventId}/attendees
          method: GET
          cors: *corsDefaults

  # ---------- Triggers ----------
  postConfirm:
    handler: src/triggers/postConfirm.handler

resources:
  Resources:
    # ===== DynamoDB Users table =====
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S 
          - AttributeName: email
            AttributeType: S 
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            Projection: { ProjectionType: ALL }
            KeySchema:
              - AttributeName: email
                KeyType: HASH

    # ===== DynamoDB Groups table =====
    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-groups
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ownerId-index
            KeySchema:
              - AttributeName: ownerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    # ===== DynamoDB GroupMembers table =====
    GroupMembersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-group-members
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # ========== DynamoDB Events table ==========
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-events
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        GlobalSecondaryIndexes:
          # Used by listEventsByGroup handler
          - IndexName: groupId-index
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    # ========== DynamoDB Event Attendees table ==========
    EventAttendeesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-events-attendees
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          # List all events a user has RSVPâ€™d to (optional, handy for "My Events")
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # ===== Cognito User Pool =====
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-users
        AutoVerifiedAttributes: [email]
        UsernameAttributes: [email]
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: false
        LambdaConfig:
          PostConfirmation: !GetAtt PostConfirmLambdaFunction.Arn

    # allow Cognito to call the postConfirm Lambda
    PostConfirmPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt PostConfirmLambdaFunction.Arn 
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt UserPool.Arn
    
    # ===== SPA App Client =====
    UserPoolClientSpa:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
        UserPoolId: !Ref UserPool
        ClientName: ${self:service}-${sls:stage}-spa
        GenerateSecret: false                      
        PreventUserExistenceErrors: ENABLED
        # OAuth (for browser PKCE flows if you use Hosted UI)
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows: [code]
        AllowedOAuthScopes: [openid, email, profile]
        SupportedIdentityProviders: [COGNITO]
        CallbackURLs:
          - https://zoommate.ohabimana.dev/auth/callback
          - http://localhost:5173/auth/callback
        LogoutURLs:
          - https://zoommate.ohabimana.dev/logout
          - http://localhost:5173/logout
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days

    # ===== Systems Manager Params =====
    ApiBaseSSMParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /ZoomMate/baseAPI
        Type: String
        Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'
    AppStageSSMParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /ZoomMate/stage
        Type: String
        Value: ${opt:stage, 'dev'}
    DynamoDBUsersTable:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /ZoomMate/usersTable
        Type: String
        Value: !Sub "${self:service}-${sls:stage}-users"

    # ===== Ensure API Gateway error responses also include CORS headers ======
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: { Ref: ApiGatewayRestApi }
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: { Ref: ApiGatewayRestApi }
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"

  Outputs:
    UserPoolId:
      Value: !Ref UserPool
    UserPoolClientId:
      Value: !Ref UserPoolClientSpa
    UserPoolArn:
      Value: !GetAtt UserPool.Arn
    ApiBase:
      Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com'

